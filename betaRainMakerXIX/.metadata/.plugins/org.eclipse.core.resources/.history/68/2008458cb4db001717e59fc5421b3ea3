package org.usfirst.frc.team360.Subsystem;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.*;
import org.usfirst.frc.team360.robot.*;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.FeedbackDeviceStatus;
import com.ctre.CANTalon.TalonControlMode;

import org.usfirst.frc.team360.commands.JoyStickTankDrive;

public class DriveTrain extends Subsystem{
	
	RobotDrive myDrive;
	static CANTalon motorR1 = RobotMap.motorR1;
	static CANTalon rightSlave = RobotMap.motorR2;
	static CANTalon motorL1 = RobotMap.motorL1;
	static CANTalon leftSlave = RobotMap.motorL2;
	
	Encoder RightDriveEncoder = RobotMap.rightDriveTrain;
	Encoder LeftDriveEncoder = RobotMap.leftDriveTrain;
	
	public void robotInit() {
		myDrive = new RobotDrive( motorR1, rightSlave, motorL1, leftSlave);
		
		motorR1.changeControlMode(TalonControlMode.PercentVbus);
		rightSlave.changeControlMode(TalonControlMode.Follower);
		motorL1.changeControlMode(TalonControlMode.PercentVbus);
		leftSlave.changeControlMode(TalonControlMode.Follower);
		
		rightSlave.set(motorR1.getDeviceID());
		leftSlave.set(motorL1.getDeviceID());
		
		motorR1.enableBrakeMode(true);
		rightSlave.enableBrakeMode(true);
		motorL1.enableBrakeMode(true);
		leftSlave.enableBrakeMode(true);
		
		int rightRelative = motorR1.getEncPosition();
		int rightRelSpeed = motorR1.getEncVelocity();
		int leftRelative = motorL1.getEncPosition();
		int leftRelSpeed = motorL1.getEncVelocity();
		
		FeedbackDeviceStatus rightSensor = motorR1.isSensorPresent(FeedbackDevice.CtreMagEncoder_Relative);
		switch(rightSensor){
		case FeedbackStatusPresent:
			break;
		case FeedbackStatusNotPresent:
			break;
		case FeedbackStatusUnknown:
			break;
		}
		
		FeedbackDeviceStatus leftSensor = motorL1.isSensorPresent(FeedbackDevice.CtreMagEncoder_Relative);
		switch(leftSensor){
		case FeedbackStatusPresent:
			break;
		case FeedbackStatusNotPresent:
			break;
		case FeedbackStatusUnknown:
			break;
		}
		
		boolean rightIn = (FeedbackDeviceStatus.FeedbackStatusPresent == rightSensor);
		boolean leftIn = (FeedbackDeviceStatus.FeedbackStatusPresent == leftSensor);
	}
	
	public void Drive(double LMotor, double RMotor){
		motorR1.set(-RMotor);
		rightSlave.set(-RMotor);
		motorL1.set(LMotor);
		leftSlave.set(LMotor);
	}
	public static void RightDrive(double RMotor){
		motorR1.set(-RMotor);
		rightSlave.set(-RMotor);
	}
	
	public static void LeftDrive(double LMotor){
		motorL1.set(LMotor);
		leftSlave.set(LMotor);
	}
	
	/*
	public void StopRight(){
		motorR1.stopMotor();
		motorR2.stopMotor();
	}
	
	public void StopLeft(){
		motorL1.stopMotor();
		motorL2.stopMotor();
	}
	
	public void StopDrive(){
		motorR1.stopMotor();
		motorR2.stopMotor();
		motorL1.stopMotor();
		motorL2.stopMotor();
	}
	*/
	
	public void resetEncoders(){
		RightDriveEncoder.reset();
		LeftDriveEncoder.reset();
	}
	
	public void ResetRight(){
		RightDriveEncoder.reset();
	}
	public void ResetLeft(){
		LeftDriveEncoder.reset();
	}
	
	public int getLHardEnc(){
		return LeftDriveEncoder.get();
	}
	
	public int getRHardEnc(){
		return RightDriveEncoder.get();
	}
	
	@Override
	protected void initDefaultCommand() {
		setDefaultCommand(new JoyStickTankDrive());
		
	}

}
